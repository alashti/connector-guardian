#!/usr/bin/env bash

set -e

# Messages
log () {
  printf '%s [%s] %s\n' "$(date '+%Y/%m/%d %H:%M:%S')" "$1" "${@:2}"
}
info () {
  if [ -t 1 ]; then
    printf '\e[1;33m%-15s\e[m%-30s%s\n' 'Info:' "$1" "${@:2}"
  else log INFO "$*"; fi
}
fail () {
  if [ -t 1 ]; then
    >&2 printf '\n\e[1;31m%-10s\e[m%s\n' 'Error:' "$*"; exit 1
  else log ERROR "$*"; exit 1; fi
}
warn () {
  if [ -t 1 ]; then
    >&2 printf '\e[1;31m%-10s\e[m%s\n' 'Warning:' "$*"
  else log WARNING "$*"; fi
}

#Set vars
: "${SIDECAR_MODE:=false}"
: "${KAFKA_CONNECT_HOST:=localhost}"
: "${KAFKA_CONNECT_PORT:=8083}"
: "${REQUEST_DELAY:=30}"

#Print vars
info SIDECAR_MODE="$SIDECAR_MODE"
info KAFKA_CONNECT_HOST="$KAFKA_CONNECT_HOST"
info KAFKA_CONNECT_PORT="$KAFKA_CONNECT_PORT"
info REQUEST_DELAY="$REQUEST_DELAY"

if [ "$SIDECAR_MODE" = true ]
then
  #wait start kafka-connect
  info 'Wait start kafka-connect 60 second'
  sleep 60s
  while true 
    do
      info 'Get status connectors' 
      if connectorsjson=$(
        curl -Lffs "http://$KAFKA_CONNECT_HOST:$KAFKA_CONNECT_PORT/connectors?expand=status"
        )
      then
        info 'Status connectors already' 
        info ':|:Name:|:State_connector:|:State tasks:|:'
        # List current connectors and status
        aray_current_states=$(echo $connectorsjson | \
          jq '. | to_entries[] | [ .value.info.type, .key, .value.status.connector.state,.value.status.tasks[].state,.value.info.config."connector.class"]|join(":|:")'
          )
        for current_state in $aray_current_states
          do
            info "$current_state"
          done
        # Restart any connector tasks that are FAILED
        echo $connectorsjson | \
          jq -c -M 'map({name: .status.name } +  {tasks: .status.tasks}) | .[] | {task: ((.tasks[]) + {name: .name})} | select(.task.state=="FAILED") | {name: .task.name, task_id: .task.id|tostring} | ("/connectors/"+ .name + "/tasks/" + .task_id + "/restart")' | \
          xargs -I{connector_and_task} curl -v -X POST "http://$KAFKA_CONNECT_HOST:$KAFKA_CONNECT_PORT"\{connector_and_task\}
        # log restart connectors
        aray_failed_tasks=$(echo $connectorsjson | \
          jq -c -M 'map({name: .status.name } +  {tasks: .status.tasks}) | .[] | {task: ((.tasks[]) + {name: .name})} | select(.task.state=="FAILED") | {name: .task.name, task_id: .task.id|tostring} | ("Connector: " + .name + " | Tasks: " + .task_id + " - RESTART")' | \
          xargs -I{connectors} printf \{connectors\}
          )
        for failed_task in $aray_failed_tasks
          do
            info "$failed_task"
          done
      else
        fail 'Connect to API Kafka Connect' \
        http://$KAFKA_CONNECT_HOST:$KAFKA_CONNECT_PORT \
        'failed with status code' $? 'and message' $connectorsjson
      fi
      info 'Wait next check after' $REQUEST_DELAY 'minut(s)'
      sleep "$REQUEST_DELAY"m
    done
else
  if connectorsjson=$(
    curl -Lff "http://$KAFKA_CONNECT_HOST:$KAFKA_CONNECT_PORT/connectors?expand=status"
    )
  then
    # Restart any connector tasks that are FAILED
    echo connectorsjson | \
    jq -c -M 'map({name: .status.name } +  {tasks: .status.tasks}) | .[] | {task: ((.tasks[]) + {name: .name})} | select(.task.state=="FAILED") | {name: .task.name, task_id: .task.id|tostring} | ("/connectors/"+ .name + "/tasks/" + .task_id + "/restart")' | \
    xargs -I{connector_and_task} curl -v -X POST "http://$KAFKA_CONNECT_HOST:$KAFKA_CONNECT_PORT"\{connector_and_task\}
  else
    fail 'Connect to API Kafka Connect' \
    http://$KAFKA_CONNECT_HOST:$KAFKA_CONNECT_PORT \
    'failed with status code' $? 'and message' $connectorsjson
  fi
fi